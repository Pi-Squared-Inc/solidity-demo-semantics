<solidity>
  <k>
    .K
  </k>
  <summarize>
    false
  </summarize>
  <compile>
    <current-body>
      SomeTokenTest
    </current-body>
    <ifaces>
      .IfaceCellMap
    </ifaces>
    <contracts>
      <contract>
        <contract-id>
          SomeToken
        </contract-id>
        <contract-state>
          UINT256_MAX |-> uint256
          _allowances |-> mapping ( address account => mapping ( address spender => uint256  )  )
          _balances |-> mapping ( address account => uint256  )
          _name |-> string
          _symbol |-> string
          _totalSupply |-> uint256
        </contract-state>
        <contract-init>
          ListItem ( UINT256_MAX = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff ; )
        </contract-init>
        <contract-fns>
          <contract-fn>
            <contract-fn-id>
              _approve
            </contract-fn-id>
            <contract-fn-visibility>
              private
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( address )
              ListItem ( uint256 )
              ListItem ( bool )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( owner )
              ListItem ( spender )
              ListItem ( value )
              ListItem ( emitEvent )
            </contract-fn-param-names>
            <contract-fn-return-types>
              .List
            </contract-fn-return-types>
            <contract-fn-return-names>
              .List
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              require ( owner != address ( 0 , .TypedVals ) , "SomeToken: invalid approver" , .TypedVals ) ;  require ( spender != address ( 0 , .TypedVals ) , "SomeToken: invalid spender" , .TypedVals ) ;  _allowances [ owner ] [ spender ] = value ;  if ( emitEvent ) { emit Approval ( owner , spender , value , .TypedVals ) ;  .Statements }  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              _burn
            </contract-fn-id>
            <contract-fn-visibility>
              private
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( uint256 )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( account )
              ListItem ( value )
            </contract-fn-param-names>
            <contract-fn-return-types>
              .List
            </contract-fn-return-types>
            <contract-fn-return-names>
              .List
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              require ( account != address ( 0 , .TypedVals ) , "SomeToken: invalid sender" , .TypedVals ) ;  _update ( account , address ( 0 , .TypedVals ) , value , .TypedVals ) ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              _mint
            </contract-fn-id>
            <contract-fn-visibility>
              private
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( uint256 )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( account )
              ListItem ( value )
            </contract-fn-param-names>
            <contract-fn-return-types>
              .List
            </contract-fn-return-types>
            <contract-fn-return-names>
              .List
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              require ( account != address ( 0 , .TypedVals ) , "SomeToken: invalid receiver" , .TypedVals ) ;  _update ( address ( 0 , .TypedVals ) , account , value , .TypedVals ) ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              _spendAllowance
            </contract-fn-id>
            <contract-fn-visibility>
              private
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( address )
              ListItem ( uint256 )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( owner )
              ListItem ( spender )
              ListItem ( value )
            </contract-fn-param-names>
            <contract-fn-return-types>
              .List
            </contract-fn-return-types>
            <contract-fn-return-names>
              .List
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              uint256 currentAllowance = allowance ( owner , spender , .TypedVals ) ;  if ( currentAllowance != UINT256_MAX ) { require ( currentAllowance >= value , "SomeToken: insufficient allowance" , .TypedVals ) ;  _approve ( owner , spender , currentAllowance - value , false , .TypedVals ) ;  .Statements }  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              _transfer
            </contract-fn-id>
            <contract-fn-visibility>
              private
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( address )
              ListItem ( uint256 )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( from )
              ListItem ( to )
              ListItem ( value )
            </contract-fn-param-names>
            <contract-fn-return-types>
              .List
            </contract-fn-return-types>
            <contract-fn-return-names>
              .List
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              require ( from != address ( 0 , .TypedVals ) , "SomeToken: invalid sender" , .TypedVals ) ;  require ( to != address ( 0 , .TypedVals ) , "SomeToken: invalid receiver" , .TypedVals ) ;  _update ( from , to , value , .TypedVals ) ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              _update
            </contract-fn-id>
            <contract-fn-visibility>
              private
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( address )
              ListItem ( uint256 )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( from )
              ListItem ( to )
              ListItem ( value )
            </contract-fn-param-names>
            <contract-fn-return-types>
              .List
            </contract-fn-return-types>
            <contract-fn-return-names>
              .List
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              if ( from == address ( 0 , .TypedVals ) ) { _totalSupply = _totalSupply + value ;  .Statements } else { uint256 fromBalance = _balances [ from ] ;  require ( fromBalance >= value , "SomeToken: insufficient balance" , .TypedVals ) ;  _balances [ from ] = fromBalance - value ;  .Statements }  if ( to == address ( 0 , .TypedVals ) ) { _totalSupply = _totalSupply - value ;  .Statements } else { _balances [ to ] = _balances [ to ] + value ;  .Statements }  emit Transfer ( from , to , value , .TypedVals ) ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              allowance
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( address )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( owner )
              ListItem ( spender )
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( uint256 )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              return _allowances [ owner ] [ spender ] ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              approve
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( uint256 )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( spender )
              ListItem ( value )
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( bool )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              address owner = msg . sender ;  _approve ( owner , spender , value , true , .TypedVals ) ;  return true ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              balanceOf
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( account )
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( uint256 )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              return _balances [ account ] ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              constructor
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( uint256 )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( init_supply )
            </contract-fn-param-names>
            <contract-fn-return-types>
              .List
            </contract-fn-return-types>
            <contract-fn-return-names>
              .List
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              _mint ( msg . sender , init_supply , .TypedVals ) ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              decimals
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              .List
            </contract-fn-arg-types>
            <contract-fn-param-names>
              .List
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( uint8 )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              return 18 ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              name
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              .List
            </contract-fn-arg-types>
            <contract-fn-param-names>
              .List
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( string )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              return _name ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              symbol
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              .List
            </contract-fn-arg-types>
            <contract-fn-param-names>
              .List
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( string )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              return _symbol ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              totalSupply
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              .List
            </contract-fn-arg-types>
            <contract-fn-param-names>
              .List
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( uint256 )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              return _totalSupply ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              transfer
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( uint256 )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( to )
              ListItem ( value )
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( bool )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              address owner = msg . sender ;  _transfer ( owner , to , value , .TypedVals ) ;  return true ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              transferFrom
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              ListItem ( address )
              ListItem ( address )
              ListItem ( uint256 )
            </contract-fn-arg-types>
            <contract-fn-param-names>
              ListItem ( from )
              ListItem ( to )
              ListItem ( value )
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( bool )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              address spender = msg . sender ;  _spendAllowance ( from , spender , value , .TypedVals ) ;  _transfer ( from , to , value , .TypedVals ) ;  return true ;  .Statements
            </contract-fn-body>
          </contract-fn>
        </contract-fns>
        <contract-events>
          <contract-event>
            <contract-event-id>
              Approval
            </contract-event-id>
            <contract-event-arg-types>
              ListItem ( address )
              ListItem ( address )
              ListItem ( uint256 )
            </contract-event-arg-types>
            <contract-event-param-names>
              ListItem ( owner )
              ListItem ( spender )
              ListItem ( value )
            </contract-event-param-names>
            <contract-event-indexed-pos>
              SetItem ( 0 )
              SetItem ( 1 )
            </contract-event-indexed-pos>
          </contract-event> <contract-event>
            <contract-event-id>
              Transfer
            </contract-event-id>
            <contract-event-arg-types>
              ListItem ( address )
              ListItem ( address )
              ListItem ( uint256 )
            </contract-event-arg-types>
            <contract-event-param-names>
              ListItem ( from )
              ListItem ( to )
              ListItem ( value )
            </contract-event-param-names>
            <contract-event-indexed-pos>
              SetItem ( 0 )
              SetItem ( 1 )
            </contract-event-indexed-pos>
          </contract-event>
        </contract-events>
      </contract> <contract>
        <contract-id>
          SomeTokenTest
        </contract-id>
        <contract-state>
          _someToken |-> SomeToken
        </contract-state>
        <contract-init>
          .List
        </contract-init>
        <contract-fns>
          <contract-fn>
            <contract-fn-id>
              _someToken
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              .List
            </contract-fn-arg-types>
            <contract-fn-param-names>
              .List
            </contract-fn-param-names>
            <contract-fn-return-types>
              ListItem ( SomeToken )
            </contract-fn-return-types>
            <contract-fn-return-names>
              ListItem ( noId )
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              return _someToken ;  .Statements
            </contract-fn-body>
          </contract-fn> <contract-fn>
            <contract-fn-id>
              testERC20Transfer
            </contract-fn-id>
            <contract-fn-visibility>
              public
            </contract-fn-visibility>
            <contract-fn-arg-types>
              .List
            </contract-fn-arg-types>
            <contract-fn-param-names>
              .List
            </contract-fn-param-names>
            <contract-fn-return-types>
              .List
            </contract-fn-return-types>
            <contract-fn-return-names>
              .List
            </contract-fn-return-names>
            <contract-fn-payable>
              false
            </contract-fn-payable>
            <contract-fn-body>
              uint256 _init_supply = 1e18 ;  _someToken = new SomeToken ( _init_supply , .TypedVals ) ;  uint256 _value = 100 ;  _someToken . transfer ( address ( 0xdead , .TypedVals ) , _value , .TypedVals ) ;  .Statements
            </contract-fn-body>
          </contract-fn>
        </contract-fns>
        <contract-events>
          .ContractEventCellMap
        </contract-events>
      </contract>
    </contracts>
  </compile>
  <exec>
    <msg-sender>
      1p160
    </msg-sender>
    <msg-value>
      0p256
    </msg-value>
    <tx-origin>
      1p160
    </tx-origin>
    <block-timestamp>
      1724300000p256
    </block-timestamp>
    <this>
      2p160
    </this>
    <this-type>
      SomeTokenTest
    </this-type>
    <env>
      _init_supply |-> var ( 0 , uint256 )
      _value |-> var ( 1 , uint256 )
    </env>
    <store>
      ListItem ( 1000000000000000000p256 )
      ListItem ( 100p256 )
    </store>
    <current-function>
      testERC20Transfer
    </current-function>
    <call-stack>
      .List
    </call-stack>
    <live-contracts>
      <live-contract>
        <contract-address>
          2p160
        </contract-address>
        <contract-type>
          SomeTokenTest
        </contract-type>
        <contract-storage>
          _someToken |-> 3p160
        </contract-storage>
      </live-contract> <live-contract>
        <contract-address>
          3p160
        </contract-address>
        <contract-type>
          SomeToken
        </contract-type>
        <contract-storage>
          UINT256_MAX |-> 115792089237316195423570985008687907853269984665640564039457584007913129639935p256
          _balances |-> ( 2p160 |-> 999999999999999900p256
          57005p160 |-> 100p256 )
          _totalSupply |-> 1000000000000000000p256
        </contract-storage>
      </live-contract>
    </live-contracts>
    <next-address>
      4p160
    </next-address>
  </exec>
</solidity>
